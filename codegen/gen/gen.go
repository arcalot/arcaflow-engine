// Generator that converts a schema yaml file to schema and type definitions golang files.
// Usage of gen:
// 	gen schema_input.yaml

package main

import (
	"bufio"
	"bytes"
	"fmt"
	"go/format"
	"io/ioutil"
	"os"
	"strings"

	"golang.org/x/text/cases"
	"golang.org/x/text/language"
	"gopkg.in/yaml.v3"
)

const typeDefImports = `package arcaflow_plugin_service

import (
    v1 "k8s.io/api/core/v1"
    metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
)
`

type property struct {
	Type struct {
		TypeID string `yaml:"type_id"`
		Id     string `yaml:"id"`
	} `yaml:"type"`
	Display struct {
		Name        string `yaml:"name"`
		Description string `yaml:"description"`
	} `yaml:"display"`
	Required bool `yaml:"required"`
}

type schema struct {
	Steps struct {
		Create struct {
			Id    string `yaml:"id"`
			Input struct {
				Objects map[string]struct {
					Id         string               `yaml:"id"`
					Properties map[string]*property `yaml:"properties"`
				} `yaml:"objects"`
			} `yaml:"input"`
		} `yaml:"create"`
	} `yaml:"steps"`
}

func mustGenerateTypeDef(schema schema) []byte {
	var (
		bft = new(bytes.Buffer) // Accumulated output for type def
		bwt = bufio.NewWriter(bft)
	)
	fmt.Fprintf(bwt, "// Code generated by \"gen %s\"\n", strings.Join(os.Args[1:], " "))
	fmt.Fprint(bwt, typeDefImports)
	for o, ov := range schema.Steps.Create.Input.Objects {
		if o == "ObjectMeta" { // Object "ObjectMeta" should be ignored
			continue
		}
		fmt.Fprintf(bwt, "\ntype %v struct {\n", cases.Title(language.Und, cases.NoLower).String(o))
		for p, pv := range ov.Properties {
			var varType string
			if pv.Type.TypeID == "ref" {
				varType = pv.Type.Id
			} else {
				varType = pv.Type.TypeID
			}
			fmt.Fprintf(bwt, "\t%v %v "+"`"+`json:"%v"`+"`"+"\n",
				cases.Title(language.Und, cases.NoLower).String(p), parseType(varType), p)
		}
		fmt.Fprintf(bwt, "}\n")
	}
	err := bwt.Flush()
	check(err)

	srcTypeDef, err := format.Source(bft.Bytes()) // grants that the output is valid golang code
	check(err)

	return srcTypeDef
}

func parseType(schemaType string) string {
	switch schemaType {
	case "integer":
		return "int64"
	case "float":
		return "float64"
	default:
		return schemaType
	}
}

func mustWriteTypeDef(generatedTypeDef []byte) {
	err := os.MkdirAll("output", os.ModePerm)
	check(err)

	err = os.WriteFile("output/typedef_output.go", generatedTypeDef, 0644)
	check(err)
}

func env() {
	fmt.Printf("Running %s go on %s\n", os.Args[0], os.Getenv("GOFILE"))
	cwd, err := os.Getwd()
	check(err)
	fmt.Printf("\tcwd = %s\n", cwd)
	fmt.Printf("\tos.Args = %#v\n", os.Args)
	for _, ev := range []string{"GOFILE", "GOLINE", "GOPACKAGE"} {
		fmt.Println("\t", ev, "=", os.Getenv(ev))
	}
}

func check(e error) {
	if e != nil {
		panic(e)
	}
}

func main() {
	env()

	inputFile, err := ioutil.ReadFile(os.Args[1])
	check(err)

	// Parsing
	var schema schema
	err = yaml.Unmarshal(inputFile, &schema)
	check(err)

	// Code generation
	generatedTypeDef := mustGenerateTypeDef(schema)

	// Output to file
	mustWriteTypeDef(generatedTypeDef)
	fmt.Println("\nOutput written to file: output/typedef_output.go")
}
